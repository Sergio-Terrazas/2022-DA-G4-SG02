# -*- coding: utf-8 -*-
"""Practica 08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IwXgD51DxlpkbPhyWLj_6L-1QX6fgJB0

# **PRACTICA 08**
######################################################################
EXPERIENCIA PRACTICA 01
######################################################################
INSTRUCCIONES CONDICIONALES:
"""
"""
######################## Mayor, menor y medio #############################
list =[]
for i in range(6):
  A=int(input("Ingrese el "+str(i+1)+" numero: "))
  while (A in list):
      print("vuelva a ingresar")
      A=int(input("Ingrese el "+str(i+1)+" numero: "))
  list.append(A)

print("La lista ingresada es: "+str(list))

print("EL mayor numero es "+str(max(list)))
print("EL menor numero es "+str(min(list)))

medio = len(list)/2
list.sort()
print(list[int(medio)])

######################## Funcion saber si es primo #############################
def es_primo(num):
    for n in range(2, num):
        if num % n == 0:
            return False
    print("Es primo")
    return True

es_primo(23)
######################## Funcion con listas #############################

def funcionlist(listas):
  print(">>listas")
  for i in listas:
    print(i)

def funcionL3(pi=3.14):
  print(">>defecto")
  print(pi)


def funcionL4(a,b):
  print(">>varios")
  return a,b,a+b


list=[1,2.5,15,10]

funcionlist(list)
funcionL3()
funcionL4(1,3)
"""
######################################################################
"""EXPERIENCIA PRACTICA 02"""
######################################################################
"""
def funcion1(diccionario):
  print("<<<<<keys>>>>")
  for i in diccionario.keys():
    print(i)
  print("<<<<<values>>>>>")
  for i in diccionario.values():
    print(i)

def funcion2(mi_diccionario2={"Messi": 30,"CR7":7,"Neymar":10}):
  print("<<<<<keys>>>>")
  for i in mi_diccionario2.keys():
    print(i)
  print("<<<<<values>>>>>")
  for i in mi_diccionario2.values():
    print(i)
 


mi_diccionario = {
    "Messi": 30,
    "CR7":7,
    "Neymar":10
}

funcion1(mi_diccionario)
funcion2()
"""
######################################################################
"""EXPERIENCIA PRACTICA 03"""
######################################################################
"""
import os
file = open("py.txt", "w")
file.close()
"""
"""
import os
file = open("Binario.bin", "wb")
file.close()
"""
"""
import os
file = open("Escritura.txt", "w+")
file.write("Hola Desarrollo de Aplicaciones")
file.close()
"""
######################################################################
"""EXPERIENCIA PRACTICA 04"""
######################################################################
"""
f = open ("ESCRIBIENDO2.txt",'w')
estado = 0
print("Escriba el texto")
while (estado==0):
  A=input("")
  f.write(A+"\n")
  estado=int(input(">> Precione 0: Continuar \n>> Presione 1: Salir ===> "))
f.close()
"""
"""
#Escribe en un archivo
def file_read(fname):
  with open(fname, "w") as myfile:
    myfile.write("Ejercicios Python\n")
    myfile.write("Ejercicios Java")
  txt = open(fname)
  print(txt.read())

file_read("ESCRIBIENDO.txt")
"""

######################################################################
"""EXPERIENCIA PRACTICA 05"""
######################################################################
"""
def file_read(fname):
 txt = open(fname)
 print(txt.read())
file_read('test.txt')
"""
# lee el archivo 2 lineas
"""
def file_read_from_head(fname, nlines):
 from itertools import islice
 with open(fname) as f:
   for line in islice(f, nlines):
     print(line)
file_read_from_head('ESCRIBIENDO.txt',2)
"""
# lee el contenido y devuelve en cadena
"""
def file_read(fname):
 with open (fname, "r") as myfile:
   data=myfile.readlines()
   print(data)
file_read('ESCRIBIENDO.txt')
"""
# lee todos los archivos de txt
"""
import glob
char_list = []

files_list = glob.glob("*.txt")
for file_elem in files_list:
  with open(file_elem, "r") as f:
    char_list.append(f.read())
print(char_list)
"""
######################################################################
"""EXPERIENCIA PRACTICA 06"""
######################################################################
"""
#Clase estudiante
class Estudiante:
  nombre = ''
  codigo = 0
  def __init__(self, name, codigo):
    self.nombre = name
    self.codigo = codigo 
  def matricular():
    print("Matricula correcta")
  def PagarPension():
    print("Pension Pagada")

#Funcion crear estudiantes
def CrearEstudiante():
  RPTA = 0
  while (RPTA<4):
    print("//////// Menu /////////")
    print("1. Registrar Alumno")
    print("2. Matricular Alumno")
    print("3. Pagar Pension")
    print("//////////////////////")
    RPTA = int(input(""))
    if (RPTA == 1):
      crear = 1
      while(crear == 1):
        nombre = input("Ingrese el Nombre del alumno: ")
        codigo = int(input("Ingrese el Codigo del alumno: "))
        D = Estudiante(nombre,codigo)
        print(D.nombre)
        print(D.codigo)
        crear= input("Si desea continuar presione 1 / si desea finalizar presione 2 : ")
    elif(RPTA == 2):
      print(D.matricular())
    elif(RPTA == 3):
      print(D.PagarPension())


CrearEstudiante()
"""
######################################################################
"""EXPERIENCIA PRACTICA 07 y 08"""
######################################################################
"""
class Estudiante():
  
  nombre = ''
  codigo = 0
  def __init__(self, name, codigo):
    self.nombre = name
    self.codigo = codigo 
  def __del__(self):
    print("Destructor")

    
  def matricular():
    print("Matricula correcta")
  def PagarPension():
    print("Pension Pagada")
  @property
  def getnombre(self):
    return(self.nombre)
  @property
  def getcodigo(self):
    return(self.codigo)

  @staticmethod
  def Uni(Universidad):
    return(Universidad)
  @staticmethod
  def iniciar(iniciar):
    return(iniciar)



nombre = input("Ingrese el Nombre del alumno: ")
codigo = int(input("Ingrese el Codigo del alumno: "))
D = Estudiante(nombre,codigo)
print(D.getnombre)
print(D.getcodigo)


print(Estudiante.Uni("UNIVERSIDAD CATOLICA DE SANTA MARIA"))
print(Estudiante.iniciar("Iniciando"))

"""
######################################################################
"""Experiencia Practica 09"""
######################################################################
"""A"""
"""
#Conectar con una base de datos
import sqlite3
conn = sqlite3.connect ('pedidos.db')
print("Conectado con exito")
"""
"""
#Conectar con una base de datos ya creada
import sqlite3
conn = sqlite3.connect (r'PATH-TO-YOUR-DIRECTORY / orders.db ')
"""
"""
import sqlite3
conn = sqlite3.connect (: memoria :)
"""
"""
#Enviar consultas SQL
cur = conn.cursor ()
cur.execute ("SU-CONSULTA-SQL-AQUÍ;")
"""
"""B"""
"""
#Abrir una base de datos
#!/usr/bin/python
import sqlite3
conn = sqlite3.connect('ORDERS.db')
print("Base de datos abierta satisfactoriamente");
"""
"""
#Crear una tabla a la base de datos
import sqlite3
conn = sqlite3.connect ('pedidos.db')
print("Conectado con exito")
cur = conn.cursor ()
cur.execute(""CREATE TABLE IF NOT EXISTS users(
 userid INT PRIMARY KEY,
 fname TEXT,
 lname TEXT,
 gender TEXT);
"")
conn.commit()
"""

"""
#Crear una base de datos 
import sqlite3
conn = sqlite3.connect ('pedidos.db')
print("Conectado con exito")
cur = conn.cursor ()
cur.execute(""CREATE TABLE IF NOT EXISTS orders(
 orderid INT PRIMARY KEY,
 date TEXT,
 userid TEXT,
 total TEXT);
"")
conn.commit()
"""
######################################################################
"""EXPERIENCIA PRACTICA 10"""
######################################################################
"""
#insercion de datos a la tabla creada anteriormente
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
conn.execute("INSERT INTO ORDERS (ORDERID, DATE, USERID, TOTAL) \
 VALUES (1, '02/12/2021', 1, 20000)");
conn.execute("INSERT INTO ORDERS (ORDERID, DATE, USERID, TOTAL) \
 VALUES (2, '02/10/2021', 2, 210)");
conn.execute("INSERT INTO ORDERS (ORDERID, DATE, USERID, TOTAL) \
 VALUES (3, '04/12/2019', 3, 415203)");
conn.execute("INSERT INTO ORDERS (ORDERID, DATE, USERID, TOTAL) \
 VALUES (4, '02/09/2019', 4, 2541360)");
conn.commit()
print("Registros creados satisfactoriamente");
conn.close()
"""
"""
#sentencia SQL que muestra lo que hay en la tabla Orders
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cursor = conn.execute("SELECT ORDERID, DATE, USERID, TOTAL from ORDERS")
for row in cursor:
 print("ORDERID = ", row[0])
 print("DATE = ", row[1])
 print("USERID = ", row[2])
 print("TOTAL = ", row[3], "\n")
print("Operacion realizada satisfactoriamente");
conn.close()

"""
"""
#Actualiza un registro
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
conn.execute("UPDATE ORDERS set TOTAL = 25000.00 where ORDERID = 1")
conn.commit()
print("Número total de registros actualizados: ", conn.total_changes)

cursor = conn.execute("SELECT ORDERID, DATE, USERID, TOTAL from ORDERS")
for row in cursor:
 print("ORDERID = ", row[0])
 print("DATE = ", row[1])
 print("USERID = ", row[2])
 print("TOTAL = ", row[3], "\n")
print("Actualización realizada satisfactoriamente");
conn.close()
"""
"""
#Eliminar un registro
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
conn.execute("DELETE from ORDERS where ORDERID = 2;")
conn.commit()
print("Número total de registros borrados: ", conn.total_changes)
cursor = conn.execute("SELECT ORDERID, DATE, USERID, TOTAL from ORDERS")
for row in cursor:
 print("ORDERID = ", row[0])
 print("DATE = ", row[1])
 print("USERID = ", row[2])
 print("TOTAL = ", row[3], "\n")
print("Eliminación realizada satisfactoriamente");
conn.close()




"""
"""

#PREVENCIÓN DE ATAQUES DE INYECCIÓN 
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cur = conn.cursor ()
order = (5, '15/06/2015', 3, 400215)
cur.execute("INSERT INTO orders VALUES(?, ?, ?, ?);", order)
conn.commit()


import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cur = conn.cursor ()
moreOrders = [(6, '03/10/2021', 3, 2015478), (7, '02/01/2019', 3, 2015698)]
cur.executemany("INSERT INTO orders VALUES(?, ?, ?, ?);", moreOrders)
conn.commit()


#con fetchone solo extrae los resultados requeridas
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cur = conn.cursor()
cur.execute("SELECT * FROM orders;")
one_result = cur.fetchone()
print(one_result)
print("Consulta realizada satisfactoriamente");
conn.close()


#Devuelve todas los resultados con fetchmany
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cur = conn.cursor()
cur.execute("SELECT * FROM orders;")
three_results = cur.fetchmany(3)
print(three_results)
print("Consulta realizada satisfactoriamente");
conn.close()


#Devuelve todas los resultados con fetchall
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cur = conn.cursor()
cur.execute("SELECT * FROM orders;")
all_results = cur.fetchall()
print(all_results)
print("Consulta realizada satisfactoriamente");
conn.close()

#unir tablas 
import sqlite3
conn = sqlite3.connect('pedidos.db')
print("Base de datos abierta satisfactoriamente");
cur = conn.cursor()
cur.execute ("" "SELECT *, users.fname, users.lname FROM orders LEFT JOIN users ON users.userid = orders.userid;"" ")
print(cur.fetchall ())
print("Consulta realizada satisfactoriamente");
conn.close()

"""
######################################################################
"""EJERCICIOS 1 Y 2"""
######################################################################

"""
def recorrer(lista):
  for i in lista:
    i.datos()

#Creacion de clases Producto, articulo y ventas
class Producto ():
  codigo = 0
  nombre = ""
  precio = 0.0
  def __init__(self, _codigo, _nombre, _precio):
    self.codigo = _codigo
    self.nombre = _nombre
    self.precio = _precio
  def datos(self):
    print("##### Registro "+str(self.codigo)+" #####")
    print("Codigo: "+ str(self.codigo))
    print("Nombre: "+ str(self.nombre))
    print("Precio: "+ str(self.precio))



class Cliente ():
  codigo = 0
  nombre = ""
  dni = 0
  def __init__(self, _codigo, _nombre, _dni):
    self.codigo = _codigo
    self.nombre = _nombre
    self.dni = _dni
  def datos(self):
    print("##### Registro "+str(self.codigo)+" #####")
    print("Codigo: "+ str(self.codigo))
    print("Nombre: "+ str(self.nombre))
    print("DNI: "+ str(self.dni))

class Venta ():
  nro_venta = 0
  total_articulo = 0
  precio_total = 0.0
  def __init__(self, _nro_venta, _total_articulo , _precio_total):
    self.nro_venta = _nro_venta
    self.total_articulo = _total_articulo
    self.precio_total = _precio_total
  def datos(self):
    print("##### Registro "+str(self.nro_venta)+" #####")
    print("Nro Venta: "+ str(self.nro_venta))
    print("Cantidad: "+ str(self.total_articulo))
    print("Precio Final: "+ str(self.precio_total))




def Registrar():
  listProducto = []
  listCliente = []
  listVenta = []
  value = 1
  while (value == 1):
    num = 100
    while (num < 1 or num > 6):
      print("########## Menu ###########")
      print("# 1. Registrar Producto   #")
      print("# 2. Registrar Cliente    #")
      print("# 3. Registrar Venta      #") 
      print("# 4. Mostrar Producto     #")
      print("# 5. Mostrar Cliente      #")
      print("# 6. Mostrar Venta        #") 
      num = int(input("# Ingrese la opc -----> "))
      if (num < 1 or num > 6):

        print("\nValor no valido\n")
    
    if (num == 1):
      print("########## Registro Producto ###########")
      a = int(input("Ingrese el codigo del producto:  "))
      b = input("Ingrese el nombre del producto:  ")
      c = float(input("Ingrese el precio del producto:  "))
      P = Producto (a,b,c)
      print("Registro exitoso")
      listProducto.append(P)
    elif (num == 2): 
      print("########## Registro Cliente ###########")
      a = int(input("Ingrese el codigo del Cliente:  "))
      b = input("Ingrese el nombre del Cliente:  ")
      c = int(input("Ingrese el DNI del Cliente:  "))
      C = Cliente (a,b,c)
      print("Registro exitoso")
      listCliente.append(C)
    elif (num == 3): 
      print("########## Registro Venta ###########")
      a = int(input("Ingrese el codigo de la Venta:  "))
      b = int(input("Ingrese el cantidad de la Venta:  "))
      c = float(input("Ingrese el total de la Venta:  "))
      V = Venta (a,b,c)
      print("Registro exitoso")
      listVenta.append(V)
    elif (num == 4):
      recorrer(listProducto) 
    elif (num == 5):
      recorrer(listCliente)
    else:
      recorrer(listVenta) 


Registrar()
"""

######################################################################
"""EJERCICIOS 3"""
######################################################################
"""
try:
  archivo = input("Nombre del archivo a buscar: ")
  file = open(str(archivo)+'.txt')
  print(file)
  print('si existe')
  file.close()
except FileNotFoundError:
  print('No existe')
  exit()
"""
######################################################################
"""EJERCICIOS 4"""
######################################################################
busqueda = input("Ingrese el texto a reemplazar: ")
recambio = input("Ingrese el nuevo texto: ")

datos = []
with open("ESCRIBIENDO.txt") as f:
	for lineas in f:
		datos.extend(lineas.split())
		print ("i" , datos)
print (datos)
for i in range(len(datos)):
  if (datos[i] == busqueda):
    datos[i] = recambio
print (datos)
f.close()

f = open("ESCRIBIENDO.txt", "r+")
f.truncate(0)
for i in range(len(datos)):
  f.writelines(datos[i]+" ")

################################################################
"""Ejercicio5"""
################################################################
"""
cl = str(input("Que palabra desea buscar?: "))

f = open("ESCRIBIENDO.txt", "r+")
cadena = f.readlines()
cadena2 = list(filter(lambda x: cl in x, cadena))

c=0
for v in cadena2:
  if v in cadena:
    c+=1

if(c>=1):
  print("Si se encuentra")
else:
  print("No se encuentra")


"""






